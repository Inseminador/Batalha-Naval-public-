import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;

import javax.swing.JOptionPane;

public class AtaqueDaMaquina extends AtaqueDoJogador {

    int PrimeiraCoordTiroMaquina;
    [REDACTED]
    int TerceiraCoordTiroMaquina;

    ArrayList<Integer> ListaPossiveisPrimeiroTiroDaSequencia = new ArrayList<>();
    int FirstTiroMaqRandomIndex;
    ArrayList<Integer> ListaPossiveisTiros = new ArrayList<>();

    ArrayList<Integer> Lista2Possibilidades = new ArrayList<>();
    [REDACTED]
    ArrayList<Integer> Lista4Possibilidades = new ArrayList<>();
    int CheckTestouTodasAsPossibilidades = 0;

    int Chance2Possibilidades;
    [REDACTED]
    int Chance4Possibilidades;

    int AcertosSeguidosMaquina = 0;
    int QuantAcertosMaquina = 0;

    [REDACTED]

    ArrayList<Integer> ListaCoordsAcertosMaquina = new ArrayList<>();
    int NavioJogador1Destruído;
    [REDACTED]
    int QuantNaviosJogadorDestruidos;

    //=======================================================================================
    ActionListener ReceberAtaqueListener = new ActionListener() {
        @Override
        public void actionPerformed(ActionEvent e4) {
            for (int i = 0; i <= 48; i++) {
                if (e4.getSource() == ButtonsMaquina[i]) {
                    ButtonsMaquina[i].removeActionListener(ReceberAtaqueListener); // Impede o mesmo bloco receber um segundo tiro
                }
            }
            [REDACTED]
    }; // Bloco do listener
    //=======================================================================================
    public void AtirarPrimeiroTiroDaSequencia() {
        //Aqui pega um valor de todas as possibilidades para o primeiro tiro. ->
        do {
            FirstTiroMaqRandomIndex = random.nextInt(ListaPossiveisPrimeiroTiroDaSequencia.size());
            PrimeiraCoordTiroMaquina = ListaPossiveisPrimeiroTiroDaSequencia.get(FirstTiroMaqRandomIndex);
        } while (ListaPossiveisPrimeiroTiroDaSequencia.get(FirstTiroMaqRandomIndex) < 0);
        //---------------------------------------------------------------------------------------
        // Aqui checa se o tiro acertou ou errou. ->
        [REDACTED]
        //---------------------------------------------------------------------------------------
        // Aqui retira valores das possibilidades para não serem cenários repetíveis. ->
        ListaPossiveisTiros.set(PrimeiraCoordTiroMaquina, -1);
        for (int i = 0; i <= 15; i++) {
            [REDACTED]
        }
    }
    //=======================================================================================
    public void AtirarSegundoTiroDaSequencia() {
        //Aqui pega um valor de todas as possibilidades para o segundo tiro. ->
        do {
            [REDACTED]
            Chance3Possibilidades = random.nextInt(3) + 1;
            Chance4Possibilidades = random.nextInt(4) + 1;
            Lista2Possibilidades.add(Chance2Possibilidades);
            [REDACTED]
            if [REDACTED]
                    if (Chance3Possibilidades == 1) {
                        SegundaCoordTiroMaquina = (PrimeiraCoordTiroMaquina + 1);
                    }[REDACTED]
            } [REDACTED]
                    SegundaCoordTiroMaquina = (PrimeiraCoordTiroMaquina + 1);
                } else if (Chance3Possibilidades == 2) {
                    SegundaCoordTiroMaquina = (PrimeiraCoordTiroMaquina - 1);
                } [REDACTED]
            }[REDACTED]
                }
            }[REDACTED]
            } [REDACTED]
            if (Lista2Possibilidades.contains(1) && Lista2Possibilidades.contains(2) &&
                    [REDACTED]
                    Lista4Possibilidades.contains(2) && Lista4Possibilidades.contains(3) &&
                    Lista4Possibilidades.contains(4)) {
                CheckTestouTodasAsPossibilidades = 1;
            } else {
                CheckTestouTodasAsPossibilidades = 0;
            }
        } while (ListaPossiveisTiros.get(SegundaCoordTiroMaquina) < 0 && CheckTestouTodasAsPossibilidades == 0);
        //---------------------------------------------------------------------------------
        Lista2Possibilidades.clear();
        [REDACTED]
        //---------------------------------------------------------------------------------
        if (ListaPossiveisTiros.get(SegundaCoordTiroMaquina) >= 0) { // Se a coordenada do tiro ainda não foi usada.
            //---------------------------------------------------------------------------------
            // Aqui checa se o tiro acertou ou errou ->
            if (CoordsTodosNavioJogador.contains(SegundaCoordTiroMaquina)) {
                [REDACTED]
                LabelFeitosMaquina.setText("Inimigo acertou!");
                [REDACTED]
                LabelFeitosMaquina.setText("Inimigo errou!");
            }
        } else { // Se todas as coordenada possíveis para o caso já foram usadas.
            System.out.println("FUDEU BERG");
            //System.exit(0);
        }
        //---------------------------------------------------------------------------------
        // Aqui tira a TerceiraCoordTiroMaquina das possibilidades de tiro ->
        ListaPossiveisTiros.set(SegundaCoordTiroMaquina, -1);
        [REDACTED]
    }
    //=======================================================================================
    public void AtirarTerceiroTiroDaSequencia() {
        //Aqui pega um valor de todas as possibilidades para o terceiro tiro. ->
        do {
            Chance2Possibilidades = random.nextInt(2) + 1;
            Lista2Possibilidades.add(Chance2Possibilidades);
            if (SegundaCoordTiroMaquina == (PrimeiraCoordTiroMaquina - 7)) {
                if (SegundaCoordTiroMaquina >= 0 && SegundaCoordTiroMaquina <= 6) {
                [REDACTED]
                    }
                }
            } else if {
			[REDACTED]
		} else {
                    if (Chance2Possibilidades == 1) {
                        TerceiraCoordTiroMaquina = (SegundaCoordTiroMaquina + 1);
                    } else if (Chance2Possibilidades == 2) {
                        TerceiraCoordTiroMaquina = (SegundaCoordTiroMaquina - 2);
                    }
                }
            }
            if (Lista2Possibilidades.contains(1) && Lista2Possibilidades.contains(2)) {
                CheckTestouTodasAsPossibilidades = 1;
            } else {
                CheckTestouTodasAsPossibilidades = 0;
            }
        } while (ListaPossiveisTiros.get(TerceiraCoordTiroMaquina) < 0 && CheckTestouTodasAsPossibilidades == 0);
        //---------------------------------------------------------------------------------
        Lista2Possibilidades.clear();
        //---------------------------------------------------------------------------------
        if (ListaPossiveisTiros.get(TerceiraCoordTiroMaquina) >= 0) { // Se a coordenada do tiro ainda não foi usada.
            // Aqui checa se o tiro acertou ou errou ->
            if (CoordsTodosNavioJogador.contains(TerceiraCoordTiroMaquina)) {
                ButtonsJogador[TerceiraCoordTiroMaquina].setIcon(BlocoAtiradoAcerto);
                [REDACTED]
                //---------------------------------------------------------------------------------
                // Aqui checa se depois da primeria iteração tri-fásica um sumarino é destruído por completo ou não. ->
                if(ListaCoordsAcertosMaquina.containsAll(CoordsPrimeiroNavioJogador)){
                    NavioJogador1Destruído = 1;
                } else {
                    NavioJogador1Destruído = 0;
                [REDACTED]
                }
                //---------------------------------------------------------------------------------
            } else {
                ButtonsJogador[TerceiraCoordTiroMaquina].setIcon(BlocoAtiradoErro);
                LabelFeitosMaquina.setText("Inimigo errou!");
            }
        } else [REDACTED]
        //---------------------------------------------------------------------------------
        // Aqui retira valores das possibilidades para não serem cenários repetíveis. ->
        ListaPossiveisTiros.set(TerceiraCoordTiroMaquina, -1);
        [REDACTED]
    } // Fim da sequência de tiro tri-partidária padrão
    //=======================================================================================
    public void CenarioEspecial1() { // Quando tem um 3x2 e ele acerta uma nas extremidas que está no sentido oposto(horizontal-vertical, e vice-versa).
        //---------------------------------------------------------------------------------
        [REDACTED]
        }
    }
    //=======================================================================================
    public void CenarioEspecial2() {
        // Nesse bloco, os AcertosSeguidos não são esses acertos mas o valor que a variável recebe quando há acerto.
        // Tipo, se a TerceiraCoordTiroMaquina acerta, o valor de AcertosSeguidos vira 0.
        //---------------------------------------------------------------------------------
        // Cada um destes 3 blocos(->) é a Segunda e Terceira fase de tiro para o primeiro, segundo e terceiro acerto, respectivamente.
        [REDACTED]
        //---------------------------------------------------------------------------------
        } else if(FaseCenarioEspecial2Ativo == 3) {
            PrimeiraCoordTiroMaquina = Variavel1ArmazenadaParaCenario2;
            AtirarSegundoTiroDaSequencia();
            [REDACTED]
        } else if(FaseCenarioEspecial2Ativo == 4) {
            AtirarTerceiroTiroDaSequencia();
            [REDACTED]
        //---------------------------------------------------------------------------------
        } [REDACTED]
        //---------------------------------------------------------------------------------
    }

}